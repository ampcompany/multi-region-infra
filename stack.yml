AWSTemplateFormatVersion: 2010-09-09

Description: Manage AWS Infrastructure by this code.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: "MR-VPC"
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Public-Subnet-A"
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: true
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Public-Subnet-B"
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock: "10.0.11.0/24"
      MapPublicIpOnLaunch: false
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Private-Subnet-A"
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      CidrBlock: "10.0.12.0/24"
      MapPublicIpOnLaunch: false
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Private-Subnet-B"
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: "MR-IGW"
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        !GetAtt IGW.InternetGatewayId
      VpcId:
        !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Public-Route"
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Private-Route-A"
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Private-Route-B"
  PublicSubnetAPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        !Ref PublicRouteTable
      SubnetId:
        !Ref PublicSubnetA
  PublicSubnetBPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        !Ref PublicRouteTable
      SubnetId:
        !Ref PublicSubnetB
  PrivateSubnetAPrivateRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        !Ref PrivateRouteTableA
      SubnetId:
        !Ref PrivateSubnetA
  PrivateSubnetBPrivateRouteTableBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        !Ref PrivateRouteTableB
      SubnetId:
        !Ref PrivateSubnetB
  PublicRouteTableRouteIGW:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        !GetAtt IGW.InternetGatewayId
      RouteTableId:
        !Ref PublicRouteTable
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-NACL"
  NetworkAclInboundRuleAllow22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        !Ref NetworkAcl
      Egress: false
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 10.0.0.0/16
      PortRange:
        From: 22
        To: 22
  NetworkAclInboundRuleAllow80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        !Ref NetworkAcl
      Egress: false
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  NetworkAclInboundRuleAllow443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        !Ref NetworkAcl
      Egress: false
      RuleNumber: 300
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  NetworkAclInboundRuleAllow5234:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        !Ref NetworkAcl
      Egress: false
      RuleNumber: 400
      Protocol: 6
      RuleAction: allow
      CidrBlock: 10.0.0.0/16
      PortRange:
        From: 5234
        To: 5234
  NetworkAclInboundRuleAllow20222:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        !Ref NetworkAcl
      Egress: false
      RuleNumber: 500
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 20222
        To: 20222
  NetworkAclInboundRuleAllow1024To65535:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        !Ref NetworkAcl
      Egress: false
      RuleNumber: 600
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  NetworkAclOutboundRuleAllowAllTraffic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        !Ref NetworkAcl
      Egress: true
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  PublicSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        !Ref PublicSubnetA
      NetworkAclId:
        !Ref NetworkAcl
  PublicSubnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        !Ref PublicSubnetB
      NetworkAclId:
        !Ref NetworkAcl
  PrivateSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        !Ref PrivateSubnetA
      NetworkAclId:
        !Ref NetworkAcl
  PrivateSubnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        !Ref PrivateSubnetB
      NetworkAclId:
        !Ref NetworkAcl
  NatGatewayEipA:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: "Name"
          Value: "MR-EIP-NAT-A"
  NatGatewayEipB:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: "Name"
          Value: "MR-EIP-NAT-B"
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        !GetAtt NatGatewayEipA.AllocationId
      SubnetId:
        !Ref PublicSubnetA
      Tags:
        - Key: "Name"
          Value: "MR-NAT-A"
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        !GetAtt NatGatewayEipB.AllocationId
      SubnetId:
        !Ref PublicSubnetB
      Tags:
        - Key: "Name"
          Value: "MR-NAT-B"
  PrivateRouteTableARouteNatGatewayA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        !Ref NatGatewayA
      RouteTableId:
        !Ref PrivateRouteTableA
  PrivateRouteTableBRouteNatGatewayB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        !Ref NatGatewayB
      RouteTableId:
        !Ref PrivateRouteTableB