AWSTemplateFormatVersion: 2010-09-09

Description: Manage AWS Infrastructure by this code.

Mappings:
  RegionMap:
    ap-northeast-2:
      VPC: 10.10.0.0/16
      DHCPDomainName: ap-northeast-2.compute.internal
      PublicSubnetA: 10.10.1.0/24
      PublicSubnetB: 10.10.2.0/24
      PrivateSubnetA: 10.10.11.0/24
      PrivateSubnetB: 10.10.12.0/24
    eu-west-1:
      VPC: 10.20.0.0/16
      DHCPDomainName: eu-west-1.compute.internal
      PublicSubnetA: 10.20.1.0/24
      PublicSubnetB: 10.20.2.0/24
      PrivateSubnetA: 10.20.11.0/24
      PrivateSubnetB: 10.20.12.0/24
    us-east-1:
      VPC: 10.30.0.0/16
      DHCPDomainName: ec2.internal
      PublicSubnetA: 10.30.1.0/24
      PublicSubnetB: 10.30.2.0/24
      PrivateSubnetA: 10.30.11.0/24
      PrivateSubnetB: 10.30.12.0/24

Conditions:
  isSeoul:
    !Equals [ !Ref "AWS::Region", ap-northeast-2 ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        !FindInMap [RegionMap, !Ref "AWS::Region", VPC]
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: "MR-VPC"
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName:
        !FindInMap [RegionMap, !Ref "AWS::Region", DHCPDomainName]
      DomainNameServers:
        - AmazonProvidedDNS
      Tags:
        - Key: "Name"
          Value: "MR-DHCP"
  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId:
        !Ref VPC
      DhcpOptionsId:
        !Ref DHCPOptions
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock:
        !FindInMap [RegionMap, !Ref "AWS::Region", PublicSubnetA]
      MapPublicIpOnLaunch: true
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Public-Subnet-A"
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      CidrBlock:
        !FindInMap [RegionMap, !Ref "AWS::Region", PublicSubnetB]
      MapPublicIpOnLaunch: true
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Public-Subnet-B"
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '0'
        - !GetAZs ''
      CidrBlock:
        !FindInMap [RegionMap, !Ref "AWS::Region", PrivateSubnetA]
      MapPublicIpOnLaunch: false
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Private-Subnet-A"
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - '1'
        - !GetAZs ''
      CidrBlock:
        !FindInMap [RegionMap, !Ref "AWS::Region", PrivateSubnetB]
      MapPublicIpOnLaunch: false
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Private-Subnet-B"
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: "MR-IGW"
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        !GetAtt IGW.InternetGatewayId
      VpcId:
        !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Public-Route"
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Private-Route-A"
  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Private-Route-B"
  PublicSubnetAPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        !Ref PublicRouteTable
      SubnetId:
        !Ref PublicSubnetA
  PublicSubnetBPublicRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        !Ref PublicRouteTable
      SubnetId:
        !Ref PublicSubnetB
  PrivateSubnetAPrivateRouteTableAAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        !Ref PrivateRouteTableA
      SubnetId:
        !Ref PrivateSubnetA
  PrivateSubnetBPrivateRouteTableBAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        !Ref PrivateRouteTableB
      SubnetId:
        !Ref PrivateSubnetB
  PublicRouteTableRouteIGW:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        !GetAtt IGW.InternetGatewayId
      RouteTableId:
        !Ref PublicRouteTable
  NetworkAcl:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-NACL"
  NetworkAclInboundRuleAllow22:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        !Ref NetworkAcl
      Egress: false
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 10.0.0.0/8
      PortRange:
        From: 22
        To: 22
  NetworkAclInboundRuleAllow80:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        !Ref NetworkAcl
      Egress: false
      RuleNumber: 200
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  NetworkAclInboundRuleAllow443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        !Ref NetworkAcl
      Egress: false
      RuleNumber: 300
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 443
        To: 443
  NetworkAclInboundRuleAllow5234:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        !Ref NetworkAcl
      Egress: false
      RuleNumber: 400
      Protocol: 6
      RuleAction: allow
      CidrBlock: 10.0.0.0/8
      PortRange:
        From: 5234
        To: 5234
  NetworkAclInboundRuleAllow20222:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        !Ref NetworkAcl
      Egress: false
      RuleNumber: 500
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 20222
        To: 20222
  NetworkAclInboundRuleAllow1024To65535:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        !Ref NetworkAcl
      Egress: false
      RuleNumber: 600
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 1024
        To: 65535
  NetworkAclOutboundRuleAllowAllTraffic:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        !Ref NetworkAcl
      Egress: true
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
  PublicSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        !Ref PublicSubnetA
      NetworkAclId:
        !Ref NetworkAcl
  PublicSubnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        !Ref PublicSubnetB
      NetworkAclId:
        !Ref NetworkAcl
  PrivateSubnetANetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        !Ref PrivateSubnetA
      NetworkAclId:
        !Ref NetworkAcl
  PrivateSubnetBNetworkAclAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        !Ref PrivateSubnetB
      NetworkAclId:
        !Ref NetworkAcl
  NatGatewayEipA:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: "Name"
          Value: "MR-EIP-NAT-A"
  NatGatewayEipB:
    Type: AWS::EC2::EIP
    Properties:
      Tags:
        - Key: "Name"
          Value: "MR-EIP-NAT-B"
  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        !GetAtt NatGatewayEipA.AllocationId
      SubnetId:
        !Ref PublicSubnetA
      Tags:
        - Key: "Name"
          Value: "MR-NAT-A"
  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        !GetAtt NatGatewayEipB.AllocationId
      SubnetId:
        !Ref PublicSubnetB
      Tags:
        - Key: "Name"
          Value: "MR-NAT-B"
  PrivateRouteTableARouteNatGatewayA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        !Ref NatGatewayA
      RouteTableId:
        !Ref PrivateRouteTableA
  PrivateRouteTableBRouteNatGatewayB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        !Ref NatGatewayB
      RouteTableId:
        !Ref PrivateRouteTableB
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Bastion EC2 Server.
      GroupName: MR-Bastion-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 20222
          ToPort: 20222
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-Bastion-SG"
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Elastic Load Balancer.
      GroupName: MR-ELB-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-ELB-SG"
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for WAS EC2 Server.
      GroupName: MR-EC2-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId:
            !Ref BastionSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId:
            !Ref ELBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-EC2-SG"
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: isSeoul
    Properties:
      GroupDescription: Security Group for RDS Server.
      GroupName: MR-RDS-SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5234
          ToPort: 5234
          CidrIp: 10.0.0.0/8
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      VpcId:
        !Ref VPC
      Tags:
        - Key: "Name"
          Value: "MR-RDS-SG"